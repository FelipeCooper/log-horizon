// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: app/sdk/proto/mlog/logs.proto

package mlog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogWriter_Register_FullMethodName = "/logs.LogWriter/Register"
)

// LogWriterClient is the client API for LogWriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço para registrar logs
type LogWriterClient interface {
	Register(ctx context.Context, in *NewLog, opts ...grpc.CallOption) (*LogResponse, error)
}

type logWriterClient struct {
	cc grpc.ClientConnInterface
}

func NewLogWriterClient(cc grpc.ClientConnInterface) LogWriterClient {
	return &logWriterClient{cc}
}

func (c *logWriterClient) Register(ctx context.Context, in *NewLog, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, LogWriter_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogWriterServer is the server API for LogWriter service.
// All implementations must embed UnimplementedLogWriterServer
// for forward compatibility.
//
// Serviço para registrar logs
type LogWriterServer interface {
	Register(context.Context, *NewLog) (*LogResponse, error)
	mustEmbedUnimplementedLogWriterServer()
}

// UnimplementedLogWriterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogWriterServer struct{}

func (UnimplementedLogWriterServer) Register(context.Context, *NewLog) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedLogWriterServer) mustEmbedUnimplementedLogWriterServer() {}
func (UnimplementedLogWriterServer) testEmbeddedByValue()                   {}

// UnsafeLogWriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogWriterServer will
// result in compilation errors.
type UnsafeLogWriterServer interface {
	mustEmbedUnimplementedLogWriterServer()
}

func RegisterLogWriterServer(s grpc.ServiceRegistrar, srv LogWriterServer) {
	// If the following call pancis, it indicates UnimplementedLogWriterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogWriter_ServiceDesc, srv)
}

func _LogWriter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogWriterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogWriter_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogWriterServer).Register(ctx, req.(*NewLog))
	}
	return interceptor(ctx, in, info, handler)
}

// LogWriter_ServiceDesc is the grpc.ServiceDesc for LogWriter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogWriter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.LogWriter",
	HandlerType: (*LogWriterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _LogWriter_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/sdk/proto/mlog/logs.proto",
}

const (
	LogReader_Search_FullMethodName       = "/logs.LogReader/Search"
	LogReader_ExportToFile_FullMethodName = "/logs.LogReader/ExportToFile"
	LogReader_StreamFile_FullMethodName   = "/logs.LogReader/StreamFile"
)

// LogReaderClient is the client API for LogReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço para buscar logs
type LogReaderClient interface {
	// Busca logs retornando como stream de registros
	Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*Logs, error)
	// Busca logs retornando como arquivo
	ExportToFile(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*FileResponse, error)
	// Busca logs retornando como stream de chunks (para arquivos grandes)
	StreamFile(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Logs], error)
}

type logReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLogReaderClient(cc grpc.ClientConnInterface) LogReaderClient {
	return &logReaderClient{cc}
}

func (c *logReaderClient) Search(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*Logs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Logs)
	err := c.cc.Invoke(ctx, LogReader_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logReaderClient) ExportToFile(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, LogReader_ExportToFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logReaderClient) StreamFile(ctx context.Context, in *SearchQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Logs], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogReader_ServiceDesc.Streams[0], LogReader_StreamFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchQuery, Logs]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogReader_StreamFileClient = grpc.ServerStreamingClient[Logs]

// LogReaderServer is the server API for LogReader service.
// All implementations must embed UnimplementedLogReaderServer
// for forward compatibility.
//
// Serviço para buscar logs
type LogReaderServer interface {
	// Busca logs retornando como stream de registros
	Search(context.Context, *SearchQuery) (*Logs, error)
	// Busca logs retornando como arquivo
	ExportToFile(context.Context, *SearchQuery) (*FileResponse, error)
	// Busca logs retornando como stream de chunks (para arquivos grandes)
	StreamFile(*SearchQuery, grpc.ServerStreamingServer[Logs]) error
	mustEmbedUnimplementedLogReaderServer()
}

// UnimplementedLogReaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogReaderServer struct{}

func (UnimplementedLogReaderServer) Search(context.Context, *SearchQuery) (*Logs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedLogReaderServer) ExportToFile(context.Context, *SearchQuery) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportToFile not implemented")
}
func (UnimplementedLogReaderServer) StreamFile(*SearchQuery, grpc.ServerStreamingServer[Logs]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFile not implemented")
}
func (UnimplementedLogReaderServer) mustEmbedUnimplementedLogReaderServer() {}
func (UnimplementedLogReaderServer) testEmbeddedByValue()                   {}

// UnsafeLogReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogReaderServer will
// result in compilation errors.
type UnsafeLogReaderServer interface {
	mustEmbedUnimplementedLogReaderServer()
}

func RegisterLogReaderServer(s grpc.ServiceRegistrar, srv LogReaderServer) {
	// If the following call pancis, it indicates UnimplementedLogReaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogReader_ServiceDesc, srv)
}

func _LogReader_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogReaderServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogReader_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogReaderServer).Search(ctx, req.(*SearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogReader_ExportToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogReaderServer).ExportToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogReader_ExportToFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogReaderServer).ExportToFile(ctx, req.(*SearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogReader_StreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogReaderServer).StreamFile(m, &grpc.GenericServerStream[SearchQuery, Logs]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogReader_StreamFileServer = grpc.ServerStreamingServer[Logs]

// LogReader_ServiceDesc is the grpc.ServiceDesc for LogReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.LogReader",
	HandlerType: (*LogReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _LogReader_Search_Handler,
		},
		{
			MethodName: "ExportToFile",
			Handler:    _LogReader_ExportToFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFile",
			Handler:       _LogReader_StreamFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/sdk/proto/mlog/logs.proto",
}
